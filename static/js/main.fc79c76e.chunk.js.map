{"version":3,"sources":["services/useMovieResults.service.ts","components/Loader.tsx","components/MovieCell.tsx","components/SearchResultsRow.tsx","components/SearchResultsTable.tsx","components/SearchBar.tsx","components/NominatedRow.tsx","components/NominatedTable.tsx","components/MovieNominationTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useMovieResultsService","title","useState","status","payload","undefined","result","setResult","slice","useEffect","length","fetch","then","response","json","Search","catch","error","console","log","Loader","MovieCell","movie","width","src","Poster","Title","Year","SearchResultsRow","searchResult","nominatedMovies","onAddNominatedMovie","has5Nominations","type","onClick","isNominated","disabled","SearchResultsTable","searchedTitle","searchResults","searchResultRows","filter","Type","forEach","find","imdbID","push","renderSearchResults","SearchBar","onSearchedTitleChange","value","onChange","event","preventDefault","target","onKeyDown","key","NominatedRow","nominatedMovie","onRemove","NominatedTable","nominatedMovieRows","MovieNominationTable","React","setSearchedTitle","setNominatedMovies","newSearch","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc79c76e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { API } from '../types/API';\r\nimport { Movies } from '../types/Movie';\r\n\r\nconst useMovieResultsService = (title: string): API<Movies> => {\r\n    const [result, setResult] = useState<API<Movies>>({\r\n        status: 'init',\r\n        payload: undefined,\r\n    });\r\n\r\n    // result will be empty if the the searchedTitle's last character is a space\r\n    // to fix this, remove the space character at the end of the string\r\n    const isLastCharSpace = title.slice(-1) === ' ';\r\n    if (isLastCharSpace) title = title.slice(0, -1);\r\n\r\n    useEffect(() => {\r\n        if (title.length === 0) return;\r\n        setResult({ status: 'loading', payload: undefined });\r\n        fetch(`https://www.omdbapi.com/?s=${title}&apikey=1a937fbc`)\r\n            .then((response) => response.json())\r\n            .then((response) =>\r\n                setResult({\r\n                    status: 'loaded',\r\n                    payload: response.Search,\r\n                }),\r\n            )\r\n            .catch((error) => setResult({ status: 'error', error }));\r\n    }, [title]);\r\n    console.log(result);\r\n    return result;\r\n};\r\n\r\nexport default useMovieResultsService;\r\n","import React from 'react';\r\n\r\nconst Loader: React.FC = () => <p>loading...</p>;\r\n\r\nexport default Loader;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from 'react';\r\nimport { Movie } from '../types/Movie';\r\n\r\ninterface Props {\r\n    movie: Movie;\r\n}\r\n\r\nconst MovieCell: React.FC<Props> = ({ movie }) => {\r\n    return (\r\n        <div>\r\n            <img width=\"100\" src={movie.Poster}></img>\r\n            <p>\r\n                {movie.Title} ({movie.Year})\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieCell;\r\n","/* eslint react/prop-types: 0 */\r\n\r\nimport React from 'react';\r\nimport { Movie, Movies } from '../types/Movie';\r\nimport MovieCell from './MovieCell';\r\n\r\ninterface Props {\r\n    searchResult: Movie;\r\n    nominatedMovies: Movies;\r\n    onAddNominatedMovie: (searchResult: Movie) => void;\r\n}\r\n\r\nconst SearchResultsRow: React.FC<Props> = ({ searchResult, nominatedMovies, onAddNominatedMovie }) => {\r\n    const handleClick = (): void => {\r\n        searchResult.isNominated = true;\r\n        onAddNominatedMovie(searchResult);\r\n    };\r\n\r\n    const has5Nominations = nominatedMovies.length === 5;\r\n\r\n    // if (has5Nominations) {\r\n    //     alert('You have your 5 nominations!');\r\n    // }\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <MovieCell movie={searchResult} />\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" onClick={handleClick} disabled={searchResult.isNominated || has5Nominations}>\r\n                    Nominate\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SearchResultsRow;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from 'react';\r\nimport useMovieResultsService from '../services/useMovieResults.service';\r\nimport { Movie, Movies } from '../types/Movie';\r\nimport Loader from './Loader';\r\nimport SearchResultsRow from './SearchResultsRow';\r\n\r\ninterface Props {\r\n    searchedTitle: string;\r\n    nominatedMovies: Movies;\r\n    onAddNominatedMovie: (searchResult: Movie) => void;\r\n}\r\n\r\nconst SearchResultsTable: React.FC<Props> = ({ searchedTitle, nominatedMovies, onAddNominatedMovie }) => {\r\n    const searchResults = useMovieResultsService(searchedTitle);\r\n    const searchResultRows: JSX.Element[] = [];\r\n\r\n    const renderSearchResults = (searchResults: Movies): void => {\r\n        searchResults.filter((movie: Movie) => movie.Type === 'movie');\r\n        searchResults.forEach((searchResult: Movie) => {\r\n            const isNominated = undefined !== nominatedMovies.find((movie) => movie.imdbID === searchResult.imdbID);\r\n            searchResult.isNominated = isNominated;\r\n            searchResultRows.push(\r\n                <SearchResultsRow\r\n                    key={searchResult.imdbID}\r\n                    searchResult={searchResult}\r\n                    nominatedMovies={nominatedMovies}\r\n                    onAddNominatedMovie={onAddNominatedMovie}\r\n                />,\r\n            );\r\n        });\r\n    };\r\n\r\n    if (searchResults.status === 'loaded' && searchResults.payload !== undefined) {\r\n        renderSearchResults(searchResults.payload);\r\n        console.log(searchResults.payload);\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <th>Search Results</th>\r\n            <tbody>\r\n                {searchResults.status === 'loading' && <Loader />}\r\n                {searchResults.status === 'loaded' && searchResults.payload !== undefined && searchResultRows}\r\n                {searchResults.status === 'loaded' &&\r\n                    searchResults.payload === undefined &&\r\n                    searchedTitle.length >= 3 && <p>no results found</p>}\r\n                {searchResults.status === 'loaded' && searchedTitle.length < 3 && (\r\n                    <p>too many results please specify</p>\r\n                )}\r\n                {searchResults.status === 'error' && (\r\n                    <p>Error, something weird happened with the search. {searchResults.error}</p>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default SearchResultsTable;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from 'react';\r\ninterface Props {\r\n    searchedTitle: string;\r\n    onSearchedTitleChange: (searchedTitle: string) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<Props> = ({ searchedTitle, onSearchedTitleChange }) => {\r\n    const handleSearchedTitleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        event.preventDefault();\r\n        onSearchedTitleChange(event.target.value);\r\n    };\r\n    const onEnter = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === 'Enter') event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <label>Movie Title</label>\r\n            <form>\r\n                <input type=\"text\" value={searchedTitle} onChange={handleSearchedTitleChange} onKeyDown={onEnter} />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","/* eslint react/prop-types: 0 */\r\n\r\nimport React from 'react';\r\nimport { Movie } from '../types/Movie';\r\nimport MovieCell from './MovieCell';\r\n\r\ninterface Props {\r\n    nominatedMovie: Movie;\r\n    onRemove: (searchResult: Movie) => void;\r\n}\r\n\r\nconst NominatedRow: React.FC<Props> = ({ nominatedMovie, onRemove }) => {\r\n    const handleClick = (): void => {\r\n        nominatedMovie.isNominated = false;\r\n        onRemove(nominatedMovie);\r\n    };\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <MovieCell movie={nominatedMovie} />\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" onClick={handleClick}>\r\n                    Remove\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default NominatedRow;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from 'react';\r\nimport { Movie, Movies } from '../types/Movie';\r\nimport NominatedRow from './NominatedRow';\r\n\r\ninterface Props {\r\n    nominatedMovies: Movies;\r\n    onRemove: (searchResult: Movie) => void;\r\n}\r\n\r\nconst NominatedTable: React.FC<Props> = ({ nominatedMovies, onRemove }) => {\r\n    const nominatedMovieRows: JSX.Element[] = [];\r\n    if (nominatedMovies != undefined) {\r\n        nominatedMovies.forEach((nominatedMovie) => {\r\n            nominatedMovieRows.push(\r\n                <NominatedRow key={nominatedMovie.imdbID} nominatedMovie={nominatedMovie} onRemove={onRemove} />,\r\n            );\r\n        });\r\n    }\r\n    return (\r\n        <table>\r\n            <th>Nominations</th>\r\n            <tbody>{nominatedMovieRows}</tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default NominatedTable;\r\n","import React from 'react';\r\nimport SearchResultsTable from './SearchResultsTable';\r\nimport SearchBar from './SearchBar';\r\nimport { Movie, Movies } from '../types/Movie';\r\nimport NominatedTable from './NominatedTable';\r\n\r\nconst MovieNominationTable: React.FC = () => {\r\n    const [searchedTitle, setSearchedTitle] = React.useState('');\r\n    const [nominatedMovies, setNominatedMovies] = React.useState<Movies>([]);\r\n\r\n    const handleSearchedTitleChange = (newSearch: string): void => {\r\n        setSearchedTitle(newSearch);\r\n    };\r\n    const onAddNominatedMovie = (nominatedMovie: Movie): void => {\r\n        setNominatedMovies([...nominatedMovies, { ...nominatedMovie }]);\r\n    };\r\n    const onRemoveNominatedMovie = (nominatedMovie: Movie): void => {\r\n        setNominatedMovies(nominatedMovies.filter((movie) => movie.imdbID !== nominatedMovie.imdbID));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>The Shoppies</h2>\r\n            <SearchBar searchedTitle={searchedTitle} onSearchedTitleChange={handleSearchedTitleChange} />\r\n            <tr>\r\n                <tbody>\r\n                    <SearchResultsTable\r\n                        searchedTitle={searchedTitle}\r\n                        nominatedMovies={nominatedMovies}\r\n                        onAddNominatedMovie={onAddNominatedMovie}\r\n                    />\r\n                </tbody>\r\n                <th> </th>\r\n                <tbody>\r\n                    <NominatedTable nominatedMovies={nominatedMovies} onRemove={onRemoveNominatedMovie} />\r\n                </tbody>\r\n            </tr>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieNominationTable;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MovieNominationTable from './components/MovieNominationTable';\r\n\r\nfunction App(): JSX.Element {\r\n    return (\r\n        <div className=\"App\">\r\n            <MovieNominationTable />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}